{"ast":null,"code":"import { DiagramElement } from \"./Diagram\";\n/**\n * describ a relationship between a set of diagram elements\n * Examples:\n * diagram\n *      [CompA] 1 --> [CompB]\n * implementation\n *      CompA{\n *          CompB classAttribute;\n *      }\n *\n * diagram\n *      [Comp] - - |> [IComp]\n * implimentation\n *      Comp impliments IComp{}\n */\n\nexport class Relationship extends DiagramElement {\n  fromCompnent(component) {\n    this.from = component.id;\n  }\n\n  toComponent(component) {\n    this.to = component === null || component === void 0 ? void 0 : component.id;\n  }\n\n}\n/**\n * The multiplicity of an atribute\n * types of representation and values:\n *  diagram     implimentation\n *  1           {   1, null  }  exact values: the inital value is min and max is null\n *  5           {   5, null  }\n *  0..5        {   0,  5    }  range values: min and max respective\n *  2..*        {   2,  -1   }  infinite (*): ang value less than 0\n *\n */\n\nexport class Multiplicity {\n  constructor() {\n    this.min = null;\n    this.max = null;\n  }\n\n}\n/**\n * describs an attibute of a diagram element\n * diagram:\n *      [ - myAttribute: DataType = DefaultObject ]\n * implimentation:\n *      private DataType myAttribute = new DefaultObject<DataType>();\n */\n\nexport class Attribute {\n  constructor() {\n    this.defaultValue = null; //says =null\n\n    this.propertyString = null; //says =null\n  }\n\n}\n/**\n * describs an operation from a diagram element\n * diagram:\n *      [ + foo(p: DataType, q: DataType): DataType ]\n * implimentation:\n *      public DataType foo( DataType p, DataType q){}\n */\n\nexport class Operation {\n  constructor() {\n    this.propertyString = null; //=null\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}