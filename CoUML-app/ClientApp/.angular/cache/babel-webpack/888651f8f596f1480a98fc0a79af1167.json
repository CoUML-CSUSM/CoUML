{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CoUmlHubService = /*#__PURE__*/(() => {\n  class CoUmlHubService {\n    constructor() {\n      // private _coUmlHubConnection: signalR.HubConnection;\n      this._url = 'https://localhost:5001/couml';\n      this._projectDeveloper = null; // this.log = new ConsoleLogger();\n      // this._coUmlHubConnection = new signalR.HubConnectionBuilder()\n      // \t\t.withUrl(this._url)\n      // \t\t.build();\n      // this.startConnection();\n    }\n\n    subscribe(projectDeveloper) {\n      if (!this._projectDeveloper) this._projectDeveloper = projectDeveloper;\n    }\n\n    startConnection() {\n      console.log(`CoUmlHubService::startConnection()`); // this._coUmlHubConnection\n      // \t\t.start()\n      // \t\t.then(()=> this.log.log(CoUmlHubService.name,\"startConnection\", `Connections started with URL: ${this._url}`))\n      // \t\t.catch((err) => this.log.log(CoUmlHubService.name,\"startConnection\",'Error while starting connection: ' + err));\n      // // listen for *test*\n      // this._coUmlHubConnection.on(\"testInterfaceMethod\", (response: string)=>{\n      // \tconsole.log(`testing responce: ${response}`);\n      // });\n      // // listen for changes\n      // this._coUmlHubConnection.on(\"Dispatch\", (changes)=>{\n      // \tthis.dispatch(changes);\n      // });\n    }\n    /**\n     *\n     * @param dId get Diagram from server\n     * @returns\n     */\n\n\n    fetch(dId) {\n      // calling function : public string Fetch(string dId)\n      // return this._coUmlHubConnection.invoke<string>('Fetch','test'); // test diagram\n      // return this._coUmlHubConnection.invoke<Diagram>('Fetch',dId); \n      return new Promise(() => \"test\");\n    }\n\n    commit(changes) {\n      this.log.log(CoUmlHubService.name, \"commit\"); // this._coUmlHubConnection.invoke(\"Push\", 'test', changes);\n    }\n\n    dispatch(changes) {\n      if (this._projectDeveloper) this._projectDeveloper.applyChange(changes);\n    }\n\n    triggerBreakPoint() {// this._coUmlHubConnection.invoke(\"TriggerBreakPoint\");\n    }\n\n  }\n\n  CoUmlHubService.ɵfac = function CoUmlHubService_Factory(t) {\n    return new (t || CoUmlHubService)();\n  };\n\n  CoUmlHubService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoUmlHubService,\n    factory: CoUmlHubService.ɵfac\n  });\n  return CoUmlHubService;\n})();\nexport class ConsoleLogger {\n  log(className, functionName, message) {\n    let format = \"color: HotPink; font-size:1.25em;\";\n    console.log(\"%c%s::%s(...)\\n\\t%s\", format, className, functionName);\n    console.log(message, 2, undefined);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}