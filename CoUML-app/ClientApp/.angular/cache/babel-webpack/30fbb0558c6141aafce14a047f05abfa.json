{"ast":null,"code":"import { Component } from \"./Component\";\nexport class GeneralCollection {\n  /**\n   * contstuctor with array of item type\n   * @param collection\n   */\n  constructor(items) {\n    this.items = [];\n    this.items = items;\n  }\n  /**\n   * Creates a collection iterator\n   * @returns CollectionIterator\n   */\n\n\n  iterator() {\n    return new CollectionIterator(this);\n  }\n  /**\n   * isnsert an item into a collection\n   * @param item\n   */\n\n\n  insert(item) {\n    this.items.push(item);\n  }\n  /**\n   * removes item from collection\n   * @param itemAtIndex index of item\n   * @returns item removed\n   */\n\n\n  remove(itemAtIndex) {\n    let item = null;\n\n    if (this.validIndex(itemAtIndex)) {\n      item = this.items[itemAtIndex];\n      this.items = this.items.splice(itemAtIndex);\n    }\n\n    return item;\n  }\n  /**\n   * size of collection\n   */\n\n\n  get size() {\n    var _a;\n\n    return ((_a = this.items) === null || _a === void 0 ? void 0 : _a.length) || -1;\n  }\n  /**\n   * determines if the index is in the collection\n   * @param i index\n   * @returns tue if valid index\n   */\n\n\n  validIndex(i) {\n    return i >= 0 && i < this.size;\n  }\n\n  get(key) {\n    // (callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any)\n    this.items.forEach(de => {\n      if (de instanceof Component) {\n        if (key == de.name) return de;\n      }\n    });\n    return null;\n  }\n\n}\n/**\n * RelationshipCollection\n */\n\nexport class RelationalCollection {\n  constructor(collection) {\n    this.items = new Map();\n\n    for (let elem of collection) this.insert(elem);\n  }\n\n  toJSON() {\n    return {\n      items: Object.fromEntries(this.items)\n    };\n  }\n\n  iterator() {\n    return new CollectionIterator(new GeneralCollection(Array.from(this.items.values())));\n  }\n\n  insert(item) {\n    this.items.set(item.id, item);\n  }\n\n  remove(signature) {\n    let relation = null;\n\n    if (this.items.has(signature)) {\n      relation = this.items.get(signature);\n      this.items.delete(relation);\n    }\n\n    return relation;\n  }\n\n  get(key) {\n    if (this.items.has(key)) return this.items.get(key);\n    return this.find(key);\n  }\n\n  find(key) {\n    for (let e of this.items.values()) {\n      if (!(e instanceof RelationalCollection)) {\n        let de = e;\n        if (key === de.name) return de;\n      }\n    }\n\n    return null;\n  }\n\n  get size() {\n    return this.items.size;\n  }\n\n}\n/**\n * AttributeCollectionIterator\n * fetches objects from collection\n */\n\nexport class CollectionIterator {\n  constructor(collection) {\n    this._position = 0;\n    this._collection = collection;\n  }\n\n  hasNext() {\n    return this._position < this._collection.size;\n  }\n\n  getNext() {\n    if (this.hasNext) {\n      return this._collection.items[++this._position];\n    }\n  }\n\n  hasPrevious() {\n    return this._position > 0;\n  }\n\n  getPrevious() {\n    if (this.hasPrevious) {\n      return this._collection.items[--this._position];\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}