{"ast":null,"code":"import { GeneralCollection } from './Collection';\nimport { Interface, Enumeration, AbstractClass, Class } from './Component';\nimport { Diagram } from './Diagram';\nimport { Relationship } from './Subcomponent';\nimport { User, NullUser } from './User';\nexport * from './Collection';\nexport * from './Diagram';\nexport * from './Component';\nexport * from './Subcomponent';\nexport * from './Types';\nexport * from './User';\nexport * from './Dimension';\nexport class DiagramBuilder {\n  buildDiagram(diagram_DTO) {\n    let d = JSON.parse(diagram_DTO);\n\n    let __diagram = new Diagram(); // console.log(\"d.elements.items[0]\\n\" + JSON.stringify(d.elements.items[0], undefined, 2));\n\n\n    for (let i = 0; i < d.elements.size; i++) {\n      // console.log(\"processing element\");\n      // console.log(d.elements.items[i]);\n      __diagram.elements.insert(d.elements.items[i]); // let e = JSON.parse(d.elements.items[i]);\n      // console.log(`parsed elem...`);\n      // let diagramElementType = this.getType(e);\n      // if(diagramElementType)\n      // {\n      // \t//is a compnent or sub component\n      // \tlet element: DiagramElement;\n      // \tswitch(diagramElementType)\n      // \t{\n      // \t\tcase Interface.name:\n      // \t\t\telement = this.buildInterface(e as Interface);\n      // \t\t\tbreak;\n      // \t\tcase Enumeration.name:\n      // \t\t\telement  = this.buildEnumeration(e as Enumeration);\n      // \t\t\tbreak;\n      // \t\tcase AbstractClass.name:\n      // \t\t\telement = this.buildAbstractClass(e as AbstractClass);\n      // \t\t\tbreak;\n      // \t\tcase Class.name:\n      // \t\t\telement = this.buildClass(e as Class);\n      // \t\t\tbreak;\n      // \t\tcase Relationship.name:\n      // \t\t\telement = this.buildRelationship(e as Relationship);\n      // \t\t\tbreak;\n      // \t}\n      // \t__diagram.elements.insert(element);\n      // }\n\n    } // console.log(\"Final Diagram\");\n    // console.log(__diagram);\n\n\n    return __diagram;\n  }\n\n  buildRelationship(x) {\n    let __relationship = new Relationship();\n\n    __relationship.id = x.id;\n    __relationship.editor = this.buildUser(x.editor);\n    __relationship.dimension = this.buildDimension(x.dimension);\n    __relationship.from = x.from;\n    __relationship.to = x.to;\n    __relationship.atributes = this.buildAttributeCollection(x.atributes);\n    return __relationship;\n  }\n\n  buildClass(x) {\n    let __class = new Class(x.name);\n\n    __class.id = x.id;\n    __class.editor = this.buildUser(x.editor);\n    __class.dimension = this.buildDimension(x.dimension);\n    __class.attributes = this.buildAttributeCollection(x.attributes);\n    __class.operations = this.buildOperationsCollection(x.operations);\n    __class.relations = this.buildRelationshipCollection(x.relations);\n    return __class;\n  }\n\n  buildAbstractClass(x) {\n    let __abstract = new AbstractClass(x.name);\n\n    __abstract.id = x.id;\n    __abstract.editor = this.buildUser(x.editor);\n    __abstract.dimension = this.buildDimension(x.dimension);\n    __abstract.attributes = this.buildAttributeCollection(x.attributes);\n    __abstract.operations = this.buildOperationsCollection(x.operations);\n    __abstract.relations = this.buildRelationshipCollection(x.relations);\n    return __abstract;\n  }\n\n  buildEnumeration(x) {\n    return new Enumeration(x.name);\n  }\n\n  buildInterface(x) {\n    let __interface = new Interface(x.name);\n\n    __interface.id = x.id;\n    __interface.editor = this.buildUser(x.editor);\n    __interface.dimension = this.buildDimension(x.dimension);\n    __interface.operations = this.buildOperationsCollection(x.operations);\n    __interface.relations = this.buildRelationshipCollection(x.relations);\n    return __interface;\n  }\n\n  buildRelationshipCollection(x) {\n    return new GeneralCollection(x.items);\n  }\n\n  buildOperationsCollection(x) {\n    return new GeneralCollection(x.items);\n  }\n\n  buildAttributeCollection(x) {\n    return new GeneralCollection(x.items);\n  }\n\n  buildUser(x) {\n    return this.getType(x)[0] == User.name ? new User(x.id) : new NullUser();\n  }\n\n  buildDimension(x) {\n    return {\n      x: x.x,\n      y: x.y,\n      width: x.width,\n      height: x.height\n    };\n  }\n\n  getType(e) {\n    console.log(`get type`);\n    console.log(JSON.stringify(e, undefined, 2));\n    let rx = /\\w+\\.\\w+\\.(\\w+)/g;\n    return rx.exec(e.$type)[0];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}