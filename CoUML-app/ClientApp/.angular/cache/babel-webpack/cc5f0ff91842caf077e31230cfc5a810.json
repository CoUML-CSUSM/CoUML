{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { Class, Component, Attribute, Relationship, RelationshipType, VisibilityType } from 'src/models/DiagramModel';\nimport { ProjectDeveloper } from '../controller/project-developer.controller';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../controller/project-developer.controller\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"primeng/inputtext\";\nimport * as i4 from \"primeng/button\";\nconst _c0 = [\"container\"];\nconst _c1 = [\"container2\"]; // import mx from './mxgraph';\n// import { mxGraph, mxGraphModel } from 'mxgraph';\n\n/**\n * https://github.com/typed-mxgraph/typed-mxgraph\n */\n\nexport let EditorComponent = /*#__PURE__*/(() => {\n  class EditorComponent {\n    constructor(_projectDeveloper) {\n      // if(mx.mxClient.isBrowserSupported()) {\n      // \tconsole.log('Yes! Yes!');\n      // }\n      this._projectDeveloper = _projectDeveloper; // \tvar graph: mxGraph = new mx.mxGraph(this.container);\n      // \tconst model: mxGraphModel = graph.getModel();\n      // \tmodel.beginUpdate();\n      // \ttry {\n      // \t\tgraph.insertVertex(graph.getDefaultParent(), '', 'TEST', 0, 0, 100, 100);\n      // \t} finally {\n      // \t\tmodel.endUpdate();\n      // \t}\n    }\n\n    ngAfterViewInit() {\n      this.graph2 = new mxGraph(this.container2.nativeElement);\n      this.graph2.getModel().beginUpdate();\n\n      this.graph2.labelChanged = function (cell, newValue, trigger) {\n        console.log(\"trigger\");\n        console.log(trigger);\n        console.log(\"cell\");\n        console.log(cell);\n        console.log(\"newValue\");\n        console.log(newValue); // // var name = (trigger != null) ? trigger.fieldname : null;\n\n        if (newValue != null) // {\n          // \t// Clones the user object for correct undo and puts\n          // \t// the new value in the correct field.\n          // \tvar value = mxUtils.clone(cell.value);\n          // \t// value[name] = newValue;\n          // \tnewValue = value;\n          mxGraph.prototype.labelChanged.apply(this, arguments); // }\n\n        return null;\n      };\n\n      try {\n        const parent = this.graph2.getDefaultParent();\n        const angularVertex = this.graph2.insertVertex(parent, null, \"value\", 100, 100, 100, 62);\n        const mxGraphVertex = this.graph2.insertVertex(parent, null, 'mxGraph', 300, 300, 100, 62); //delete\n\n        const michael = this.graph2.insertVertex(parent, null, 'test', 50, 200, 100, 62);\n        this.graph2.insertEdge(parent, null, 'test', michael, mxGraphVertex); //\n\n        this.graph2.insertEdge(parent, null, 'with', angularVertex, mxGraphVertex);\n      } finally {\n        this.graph2.getModel().endUpdate();\n      }\n    }\n\n    ngOnInit() {\n      // Checks if the browser is supported\n      console.log(`mx.mxClient.isBrowserSupported() = ${mxClient.isBrowserSupported()}`);\n\n      if (!mxClient.isBrowserSupported()) {\n        // Displays an error message if the browser is not supported\n        mxUtils.error('Browser is not supported!', 200, false);\n      } else {\n        // mxUtils.error('Browser is supported! > ,_, <', 200, false);\n        // Creates the graph inside the given container\n        this.graph = new mxGraph(this.container.nativeElement);\n        this.graph.setHtmlLabels(true); // Adds handling of return and escape keystrokes for editing\n\n        var keyHandler = new mxKeyHandler(this.graph); // Helper method that returns the fieldname to be used for\n        // a mouse event\n\n        var getFieldnameForEvent = function (cell, evt) {\n          if (evt != null) {\n            // Finds the relative coordinates inside the cell\n            var point = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n            var state = this.graph.getView().getState(cell);\n\n            if (state != null) {\n              point.x -= state.x;\n              point.y -= state.y; // Returns second if mouse in second half of cell\n\n              if (point.y > state.height / 2) {\n                return 'second';\n              }\n            }\n          }\n\n          return 'first';\n        }; // Returns a HTML representation of the cell where the\n        // upper half is the first value, lower half is second\n        // value\n\n\n        this.graph.getLabel = function (cell) {\n          var table = document.createElement('table');\n          table.style.height = '100%';\n          table.style.width = '100%';\n          var body = document.createElement('tbody');\n          var tr1 = document.createElement('tr');\n          var td1 = document.createElement('td');\n          td1.style.textAlign = 'center';\n          td1.style.fontSize = '12px';\n          td1.style.color = '#774400';\n          mxUtils.write(td1, cell.value.first);\n          var tr2 = document.createElement('tr');\n          var td2 = document.createElement('td');\n          td2.style.textAlign = 'center';\n          td2.style.fontSize = '12px';\n          td2.style.color = '#774400';\n          mxUtils.write(td2, cell.value.second);\n          tr1.appendChild(td1);\n          tr2.appendChild(td2);\n          body.appendChild(tr1);\n          body.appendChild(tr2);\n          table.appendChild(body);\n          return table;\n        }; // Returns the editing value for the given cell and event\n\n\n        this.graph.getEditingValue = function (cell, evt) {\n          let fieldname = getFieldnameForEvent(cell, evt);\n          return cell.value[fieldname] || '';\n        }; // Sets the new value for the given cell and trigger\n\n\n        this.graph.labelChanged = function (cell, newValue, trigger) {\n          console.log(\"trigger\");\n          console.log(trigger); // var name = (trigger != null) ? trigger.fieldname : null;\n\n          if (name != null) {\n            // Clones the user object for correct undo and puts\n            // the new value in the correct field.\n            var value = mxUtils.clone(cell.value); // value[name] = newValue;\n\n            newValue = value;\n            mxGraph.prototype.labelChanged.apply(this, arguments);\n          }\n\n          return null;\n        }; // Sample user objects with 2 fields\n\n\n        var value = {\n          first: 'First value',\n          second: 'Second value'\n        }; // Gets the default parent for inserting new cells. This\n        // is normally the first child of the root (ie. layer 0).\n\n        var parent = this.graph.getDefaultParent(); // Adds cells to the model in a single step\n\n        this.graph.getModel().beginUpdate();\n\n        try {\n          var v1 = this.graph.insertVertex(parent, null, value, 100, 60, 120, 80, 'overflow=fill;'); //delete\n\n          var test = {\n            first: 'test',\n            second: 'test'\n          };\n          var v2 = this.graph.insertVertex(parent, null, test, 230, 60, 120, 80, 'overflow=fill;'); //\n\n          console.log(\"this.graph\");\n          console.log(this.graph);\n        } finally {\n          // Updates the display\n          this.graph.getModel().endUpdate();\n        }\n      }\n    } //***************************************************/\n\n\n    open() {\n      this._projectDeveloper.open(this.diagramId);\n    } // public sample()\n    // {\n    // \tthis._projectDeveloper.openSample();\n    // \tthis.diagram_description = this._projectDeveloper.describe();\n    // }\n\n\n    sample() {\n      let d = this._projectDeveloper.projectDiagram; // class\n\n      let c = new Class(\"Triangle\");\n      let a = new Attribute();\n      a.visibility = VisibilityType.Private;\n      a.type = {\n        dataType: \"double\"\n      };\n      c.attributes.insert(a); // c impliments i\n\n      let r = new Relationship();\n      r.type = RelationshipType.Realization;\n      r.fromCompnent(c);\n      r.toComponent(d.elements.get(\"IShape\"));\n      d.elements.insert(r);\n\n      this._projectDeveloper.makeChange(d);\n    }\n\n  }\n\n  EditorComponent.ɵfac = function EditorComponent_Factory(t) {\n    return new (t || EditorComponent)(i0.ɵɵdirectiveInject(i1.ProjectDeveloper));\n  };\n\n  EditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditorComponent,\n    selectors: [[\"app-editor\"]],\n    viewQuery: function EditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ElementRef);\n        i0.ɵɵviewQuery(_c1, 7, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container2 = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([ProjectDeveloper])],\n    decls: 12,\n    vars: 2,\n    consts: [[1, \"p-float-label\"], [\"id\", \"float-input\", \"type\", \"text\", \"pInputText\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"float-input\"], [\"label\", \"OpenDiagram\", 3, \"onClick\"], [\"label\", \"make change\", 3, \"onClick\"], [\"id\", \"mxgraph-diagram-container\", 2, \"position\", \"relative\", \"width\", \"500px\", \"height\", \"500px\", \"background\", \"url('editors/images/grid.gif')\"], [\"container\", \"\"], [\"container2\", \"\"]],\n    template: function EditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵelementStart(1, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function EditorComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.diagramId = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Diagram Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p-button\", 3);\n        i0.ɵɵlistener(\"onClick\", function EditorComponent_Template_p_button_onClick_4_listener() {\n          return ctx.open();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p-button\", 4);\n        i0.ɵɵlistener(\"onClick\", function EditorComponent_Template_p_button_onClick_5_listener() {\n          return ctx.sample();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"div\", 5, 6);\n        i0.ɵɵelement(10, \"div\", 5, 7);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.diagramId);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" \", ctx.diagram_description, \"\\n\");\n      }\n    },\n    directives: [i2.DefaultValueAccessor, i3.InputText, i2.NgControlStatus, i2.NgModel, i4.Button],\n    encapsulation: 2\n  });\n  return EditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}